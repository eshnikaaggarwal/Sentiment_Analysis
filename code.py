# -*- coding: utf-8 -*-
"""sentiment analysis .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1psSWX4s7sHwr5r8WyB-XUMUU3IzTssis
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import re
import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')

def load_data(sample_size=5000):
    # Load IMDB dataset
    data = pd.read_csv('https://raw.githubusercontent.com/Ankit152/IMDB-sentiment-analysis/master/IMDB-Dataset.csv')
    # Take a sample to make it faster
    data = data.sample(n=sample_size, random_state=42)
    return data

def preprocess_text(text):
    # Convert to lowercase
    text = text.lower()
    # Remove HTML tags
    text = re.sub(r'<.*?>', '', text)
    # Remove special characters and digits
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    # Remove extra whitespace
    text = ' '.join(text.split())
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    text = ' '.join([word for word in text.split() if word not in stop_words])
    return text

def prepare_features(data):
    # Preprocess reviews
    X = data['review'].apply(preprocess_text)
    # Convert sentiment to numeric
    y = (data['sentiment'] == 'positive').astype(int)
    return X, y

def create_tfidf_features(X_train, X_test):
    tfidf = TfidfVectorizer(max_features=5000)
    X_train_tfidf = tfidf.fit_transform(X_train)
    X_test_tfidf = tfidf.transform(X_test)
    return X_train_tfidf, X_test_tfidf, tfidf

def train_evaluate_model(X_train_tfidf, X_test_tfidf, y_train, y_test):
    # Initialize and train the model
    model = LogisticRegression(random_state=42)
    model.fit(X_train_tfidf, y_train)

    # Make predictions
    y_pred = model.predict(X_test_tfidf)

    # Print evaluation metrics
    print("\nAccuracy:", accuracy_score(y_test, y_pred))
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

    return model

def predict_sentiment(text, model, tfidf):
    # Preprocess the new text
    processed_text = preprocess_text(text)
    # Transform to TF-IDF features
    text_tfidf = tfidf.transform([processed_text])
    # Predict
    prediction = model.predict(text_tfidf)[0]
    return "Positive" if prediction == 1 else "Negative"



def main():
    # Load data
    print("Step 1: Loading data...")
    data = load_data()

    # Prepare features
    print("Step 2: Preparing features...")
    X, y = prepare_features(data)

    # Split data
    print("Step 3: Splitting data...")
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Create TF-IDF features
    print("Step 4: Creating TF-IDF features...")
    X_train_tfidf, X_test_tfidf, tfidf = create_tfidf_features(X_train, X_test)

    # Train and evaluate model
    print("Step 5: Training and evaluating model...")
    model = train_evaluate_model(X_train_tfidf, X_test_tfidf, y_train, y_test)

    # Test with a sample review
    sample_review = "This movie was absolutely fantastic! Great acting and amazing plot."
    sentiment = predict_sentiment(sample_review, model, tfidf)
    print(f"\nSample Review Sentiment: {sentiment}")

if __name__ == "__main__":
    main()
